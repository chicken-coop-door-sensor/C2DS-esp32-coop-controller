name: OTA Reload on Commit

on:
  push:
    branches:
      - main # Adjust this to your branch if necessary

jobs:
  ota_reload:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository with submodules
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.CONTROLLER_WORKFLOW_GITHUB_TOKEN }}
          submodules: recursive

      # Step 2: Install git-crypt
      - name: Install git-crypt
        run: sudo apt-get install git-crypt

      # Step 3: Unlock git-crypt
      - name: Unlock git-crypt
        run: |
          echo "${{ secrets.GIT_CRYPT_CONTROLLER_KEY }}" | base64 --decode > git-crypt-key
          git-crypt unlock git-crypt-key
          rm git-crypt-key
        working-directory: ${{ github.workspace }}

      # Step 4: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Step 5: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 6: Use Docker image for ESP32 build
      - name: Use Docker image for ESP32 build
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/esp-idf:latest

      # Step 7: Get the current commit hash
      - name: Get the current commit hash
        id: vars
        run: echo ::set-output name=sha_short::$(git rev-parse --short HEAD)

      # Step 8: Configure Git identity
      - name: Configure Git identity
        run: |
          git config --global user.email "github-actions@example.com"
          git config --global user.name "GitHub Actions"

      # Step 9: Tag the commit if tag doesn't exist
      - name: Tag the commit if tag doesn't exist
        id: tag
        run: |
          VERSION_TAG="v1.0.0-${{ steps.vars.outputs.sha_short }}"
          if ! git rev-parse $VERSION_TAG >/dev/null 2>&1; then
            echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_ENV
            git tag -a $VERSION_TAG -m "Tagging commit ${{ steps.vars.outputs.sha_short }}"
            git push origin $VERSION_TAG
          else
            echo "Tag $VERSION_TAG already exists"
            VERSION_TAG=$VERSION_TAG
            echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_ENV
          fi

      # Step 10: Build Controller
      - name: Build Controller
        run: |
          docker run --rm \
            -v $PWD:/workspace \
            -w /workspace \
            -e COMPONENT_KCONFIGS_DIR=/workspace/components \
            -e VERSION_TAG=${{ env.VERSION_TAG }} \
            ${{ secrets.DOCKER_USERNAME }}/esp-idf:latest \
            /bin/bash -c ". /opt/esp-idf/export.sh && idf.py build"
        working-directory: ${{ github.workspace }}

      # Step 11: Upload Controller to S3
      - name: Upload Controller to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2
        run: |
          aws s3 cp build/firmware.bin s3://${{ secrets.AWS_S3_BUCKET }}/coop-controller/$VERSION_TAG/firmware.bin
        working-directory: ${{ github.workspace }}

      # Step 12: Publish MQTT message
      - name: Publish MQTT message
        env:
          AWS_IOT_ENDPOINT_URL: ${{ secrets.AWS_IOT_ENDPOINT_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2
        run: |
          aws iot-data publish \
            --endpoint-url $AWS_IOT_ENDPOINT_URL \
            --topic "coop/update/controller" \
            --cli-binary-format raw-in-base64-out \
            --payload "{\"controller\": \"${{ secrets.AWS_S3_URL_PREFIX }}/coop-controller/$VERSION_TAG/firmware.bin\"}"
        working-directory: ${{ github.workspace }}
